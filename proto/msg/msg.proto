syntax = "proto3";

package lane.msg;
option go_package = "laneIM/proto/msg;msg";

// protoc --go_out=.. --go-grpc_out=..
// --go-grpc_opt=require_unimplemented_servers=false -I. -Iproto
// proto/msg/msg.proto proto/comet/comet.proto proto/logic/logic.proto

//  client <--> comet
message Msg {
  bytes data = 1;
  string path = 2;
  int64 seq = 3;
}

// client <--> comet
message MsgBatch { repeated Msg msgs = 1; }

// in Msg.data client->logic
message CSendRoomReq {
  int64 userid = 1;
  int64 roomid = 2;
  string msg = 3;
  // set by cometserver
  int64 timeunix = 4;
}
message CSendRoomResp { bool ack = 1; }

message CQueryStoreMessageReq {
  int64 roomid = 1;
  int64 messageId = 2;
  int64 timeUnix = 3;
  int64 size = 4;
}

message COnlyCountMessage {
  int64 roomid = 1;
  int32 count = 2;
}

message SendMsgReq {
  int64 messageid = 1;
  string path = 2;
  // from which server
  string addr = 3;
  // from which user
  int64 userid = 4;
  int64 roomid = 5;
  int64 userseq = 6;
  int64 timeunix = 7;
  int64 toUserid = 8;
  bytes data = 9;
}

message RoomStoreChatMessage {
  int64 messageid = 1;
  int64 userid = 2;
  int64 userseq = 3;
  int64 timeunix = 4;
  bytes data = 5;
}
// comet->logic->kafka->job
message SendMsgBatchReq { repeated SendMsgReq msgs = 1; }

message QueryMultiRoomPagesReq { // 对应某房间
  message RoomMultiPageInfo {
    // 对应某一段
    message PageInfo {
      int64 messageId = 1;
      int64 timeUnix = 2;
      int64 size = 3;
    }
    int64 roomid = 1;
    repeated PageInfo pageInfos = 2;
  }
  repeated RoomMultiPageInfo roomMultiPageInfos = 1;
}
message QueryMultiRoomPagesReply {
  message RoomMultiPageMsg { // 对应某房间
    message PageMsgs {       //对应每一段
      repeated RoomStoreChatMessage msgs = 1;
    }
    repeated PageMsgs pagesMsgs = 1;
  }
  repeated RoomMultiPageMsg roomMultiPageMsgs = 1;
}

message UserInfo {
  int64 userid = 1;
  bool online = 2;
  map<int64, bool> roomid = 3;
  map<string, bool> server = 4;
}

message RoomInfo {
  int64 roomid = 1;
  map<string, bool> server = 2;
  map<int64, bool> users = 3;
  int64 onlineNum = 4;
}

// in msg.data client -> logic
message CAuthReq {
  repeated string params = 1;
  int64 userid = 2;
}
// logic -> client
message CAuthResp { bool pass = 1; }

// client->logic
message CRoomidReq { int64 userid = 1; }
// loigc -> client
message CRoomidResp { repeated int64 roomid = 1; }

// offline
message COfflineReq { int64 userid = 1; }

message CometInfo { repeated int64 rooms = 1; }

message CNewUserReq {}

message CNewUserResp { int64 userid = 1; }

message CNewRoomReq { int64 userid = 1; }
message CNewRoomResp { int64 roomid = 1; }

message CJoinRoomReq {
  int64 userid = 1;
  int64 roomid = 2;
}
message CJoinRoomResp { bool ack = 1; }

message CQuitRoomReq {
  int64 userid = 1;
  int64 roomid = 2;
}
message CQuitRoomResp { bool ack = 1; }

message COnlineReq { int64 userid = 1; }
message COnlineResp {
  bool ack = 1;
  repeated int64 roomid = 2;
}

message CQueryLastReq { int64 roomid = 1; }
message CQueryLastResp {
  int64 messageId = 1;
  int64 timeUnix = 2;
}