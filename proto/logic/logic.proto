syntax = "proto3";

package lane.logic;
option go_package = "laneIM/proto/logic;logic";
import "proto/msg/msg.proto";

message SendMsgReq {
  bytes data = 1;
  string path = 2;
  // from which server
  string addr = 3;
  // from which user
  int64 userid = 4;
  int64 roomid = 5;
  int64 toUserid = 6;
}

message NoResp {}

message SetOnlineReq {
  lane.msg.UserInfo userinfo = 1;
  string server = 2;
}

message SetOnlineResp {}

message SetOfflineReq {
  lane.msg.UserInfo userinfo = 1;
  string server = 2;
}

message JoinRoomReq {
  lane.msg.UserInfo userinfo = 1;
  int64 roomid = 2;
}

message QuitRoomReq {
  lane.msg.UserInfo userinfo = 1;
  int64 roomid = 2;
}

message QueryRoomReq { repeated lane.msg.UserInfo userinfo = 1; }

message QueryRoomResp {
  message UserInfoResp {
    bool online = 1;
    repeated int64 roomid = 2;
  }
  repeated UserInfoResp userinfoResp = 1;
}

message QueryServerReq { repeated lane.msg.UserInfo userinfo = 1; }

message QueryServerResp {
  message UserInfoResp {
    bool online = 1;
    // userinfo的设备可以设置成-1，然后查询所有设备所在服务器id
    repeated string serverAddrs = 2;
  }
  repeated UserInfoResp userinfoResp = 1;
}

message NewUserReq { lane.msg.UserInfo userinfo = 1; }

message DelUserReq { lane.msg.UserInfo userinfo = 1; }

service logic {
  rpc SendMsg(SendMsgReq) returns (NoResp);

  rpc SetOnline(SetOnlineReq) returns (NoResp);
  rpc SetOffline(SetOfflineReq) returns (NoResp);

  rpc NewUser(NewUserReq) returns (NoResp);
  rpc DelUser(DelUserReq) returns (NoResp);

  rpc JoinRoom(JoinRoomReq) returns (NoResp);
  rpc QuitRoom(QuitRoomReq) returns (NoResp);
  rpc QueryRoom(QueryRoomReq) returns (QueryRoomResp);

  rpc QueryServer(QueryServerReq) returns (QueryServerResp);
}
